--- a/pkg/provider/api.go
+++ b/pkg/provider/api.go
@@ -368,30 +368,21 @@ func (c *MCPSlackClient) GetUserPresenceContext(ctx context.Context, user string
 
 func (c *MCPSlackClient) CreateConversationContext(ctx context.Context, channelName string, isPrivate bool) (*slack.Channel, error) {
-	// For Enterprise Grid with browser tokens, use Edge client
-	if c.isEnterprise && !c.isOAuth {
-		edgeChannel, err := c.edgeClient.CreateConversation(ctx, channelName, isPrivate, c.authResponse.TeamID)
-		if err != nil {
-			return nil, err
-		}
-
-		// Convert from rusq/slack.Channel to slack-go/slack.Channel
-		// ... conversion code ...
-		return channel, nil
-	}
-
-	// For OAuth tokens or non-Enterprise Grid, use standard API
+	// Use standard API for all cases - it works with browser tokens too!
+	// The key is including team_id for Enterprise Grid
 	params := slack.CreateConversationParams{
 		ChannelName: channelName,
 		IsPrivate:   isPrivate,
 	}
 
-	// For Enterprise Grid with OAuth, include team_id if available
-	if c.isEnterprise && c.authResponse != nil {
+	// For Enterprise Grid (both OAuth and browser tokens), include team_id
+	if c.isEnterprise && c.authResponse != nil && c.authResponse.TeamID != "" {
 		params.TeamID = c.authResponse.TeamID
 	}
 
 	channel, err := c.slackClient.CreateConversationContext(ctx, params)
 	if err != nil {
+		c.logger.Debug("CreateConversationContext failed", 
+			zap.Error(err), zap.String("team_id", params.TeamID))
 		return nil, err
 	}
 	return channel, nil